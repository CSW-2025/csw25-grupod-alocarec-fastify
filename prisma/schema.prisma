generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Sexo {
  M
  F
}

enum Status {
  PENDENTE
  APROVADA
  REJEITADA
}

enum HorarioEnum {
  A // 08:00
  B // 08:45
  C // 09:45
  D // 10:30
  E // 11:30
  F // 14:00
  G // 14:45
  H // 15:45
  I // 16:30
  J // 17:30
  K // 18:15
  L // 19:15
  M // 20:00
  N // 21:00
  P // 21:45
}

model Usuario {
  id             Int       @id @default(autoincrement())
  email          String    @unique
  nome           String
  dataNascimento DateTime
  sexo           Sexo
  telefones      Telefone[]
  perfilId       Int
  perfil         Perfil    @relation(fields: [perfilId], references: [id])
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  reservas       Reserva[]
  aulas          AulaUsuario[]
  senha          String    // hash da senha
}

model Telefone {
  id         Int      @id @default(autoincrement())
  numero     String
  descricao  String
  usuarioId  Int
  usuario    Usuario  @relation(fields: [usuarioId], references: [id])
}

model Perfil {
  id      Int      @id @default(autoincrement())
  nome    String   @unique
  usuarios Usuario[]
}

model Grupo {
  id        Int        @id @default(autoincrement())
  nome      String
}

model Turma {
  id            Int        @id @default(autoincrement())
  numero        String
  semestre      String
  professor_id  Int
  vagas         Int
  disciplina_id Int?
  horarios      Horario[]
  aulas         Aula[]
}

model Horario {
  id          Int     @id @default(autoincrement())
  dia_semana  String
  horario     HorarioEnum
  turma_id    Int
  turma       Turma   @relation(fields: [turma_id], references: [id])
}

model Curriculo {
  id        Int         @id @default(autoincrement())
  nome_curso              String
  semestre_inicio_vigencia String
  semestre_fim_vigencia    String
  disciplinas              Disciplina[] @relation("CurriculoDisciplinas")
}

model Disciplina {
  id            Int       @id @default(autoincrement())
  nome          String
  codigo        String    @unique
  creditos      Int
  carga_horaria Int
  ementa        String?
  curriculos    Curriculo[] @relation("CurriculoDisciplinas")
}

model Pedido {
  id             Int      @id @default(autoincrement())
  nome           String
  status         Status
  moderador_id   Int?
  sala_id        Int?
  recurso_id     Int?
  aula_id        Int
  disciplina_id  Int
  sala           Sala?    @relation(fields: [sala_id], references: [id])
  recurso        Recurso? @relation(fields: [recurso_id], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Recurso {
  id              Int     @id @default(autoincrement())
  descricao       String
  status          String
  disponivel      Boolean @default(true)
  tipo_recurso_id Int
  tipoRecurso     TipoRecurso @relation(fields: [tipo_recurso_id], references: [id])
  pedidos         Pedido[]
}

model Reserva {
  id        Int      @id @default(autoincrement())
  salaId    Int
  usuarioId Int
  dataHora  DateTime
  sala      Sala     @relation(fields: [salaId], references: [id])
  usuario   Usuario  @relation(fields: [usuarioId], references: [id])
}

model TipoRecurso {
  id        Int      @id @default(autoincrement())
  nome      String   @unique
  recursos  Recurso[]
}


model Sala {
  id         Int      @id @default(autoincrement())
  nome       String
  capacidade Int
  predioId   Int
  predio     Predio   @relation(fields: [predioId], references: [id])
  pedidos    Pedido[]
  reservas   Reserva[]
  aulas      Aula[]
}

model Aula {
  id          Int      @id @default(autoincrement())
  nome        String
  data_inicio DateTime
  data_fim    DateTime
  descricao   String?
  turmaId     Int
  salaId      Int
  horario     HorarioEnum?
  turma       Turma    @relation(fields: [turmaId], references: [id])
  sala        Sala     @relation(fields: [salaId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  usuarios    AulaUsuario[]
}

model Predio {
  id              Int     @id @default(autoincrement())
  numero          String
  nome            String  @unique
  descricao       String?
  rua             String
  numero_endereco String
  complemento     String?
  bairro          String
  cidade          String
  uf              String
  cep             String

  salas           Sala[]
}

model AulaUsuario {
  usuarioId Int
  aulaId    Int
  usuario   Usuario @relation(fields: [usuarioId], references: [id])
  aula      Aula    @relation(fields: [aulaId], references: [id])
  @@id([usuarioId, aulaId])
}
